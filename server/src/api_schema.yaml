openapi: 3.0.0
info:
  title: Coffee Shop API
  version: 1.0.0
  description: API schema for products catalog and bonus system
servers:
  - url: /api
paths:
  /products:
    get:
      summary: List products with optional filtering, pagination and sorting
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [drink, dessert]
          description: Filter by product type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-based)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - in: query
          name: sort
          schema:
            type: string
            enum: [price, -price, name, -name, createdAt, -createdAt]
          description: Sort field and order
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total:
                    type: integer
                  pages:
                    type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      summary: Get product by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bonus/summary:
    get:
      summary: Get bonus summary for current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Bonus summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                  totalEarned:
                    type: number
                  totalRedeemed:
                    type: number
                  totalSpend:
                    type: number
                  tierPercent:
                    type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /dev/seed:
    get:
      summary: Development-only seeding endpoint (creates initial products when collection is empty)
      parameters:
        - in: query
          name: secret
          required: true
          schema:
            type: string
            example: DEV_SEED_SECRET
          description: Simple dev-only secret
      responses:
        '200':
          description: Seed result
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: boolean
                  inserted:
                    type: integer
                  count:
                    type: integer
                  message:
                    type: string
        '403':
          description: Invalid secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [drink, dessert]
        price:
          type: number
        isPromo:
          type: boolean
        promoBonusPercent:
          type: number
          nullable: true
        availableSyrups:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
